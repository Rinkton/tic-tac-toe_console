This document contains techie explanation on language of programmers (on object-oriented).

## - folder of #folders
# - folder

) - class
] - interface
} - abstract class
> - static class

1## Logic
	1# Other
		1) Program - start of the program

	2# Management
		1) Menu - manage work of menu
		2) Game - manage work of game

	3# Visualization
		1) Menu - visualize menu (welcome text, choices)
		2) Game - require array of cells (filled it X or O or not filled), who is move now

	4# Analyzation
		1) ExistMove - require array of cells, check existing moves yet or no
		2) AllowableMove - require move position, check, allowable this move or no
		3) PlayerWon - require array of cells, player, that make last move, check won player, if yes - return true
		4) ChoiceMenu - require choice from player and return object-executor
		5) CurrentStage - require player, that now must move, return object-what_stage_now
		6) ChoiceMovePosition - require choice from user, return move position
	
2## Objects
	1# Players
		1} Player - abstract class of type player, that can play
		2) User : Player - user
		3) Computer : Player - AI
		
	2# MenuChoices
		1] IMenuChoice - interface of user's choice in menu
		2) PlayWithPlayer : IMenuChoice - play with other player choice
		3) PlayWithComputer : IMenuChoice - play with computer choice
		4) Quit : IMenuChoice - quit the game
	
	3# Marks
		1} Mark - abstract class of type marks on grid (X or O)
		2) X : Mark - X the mark
		3) O : Mark - O the mark
		
	4# Stages
		1} Stage - abstract class of stage on move of the game
		2) FirstPlayerMove : Stage - now first player is move
		3) SecondPlayerMove : Stage - now second player is move
		4) WinFirst : Stage - first player (X) in won
		5) WinSecond : Stage - second player (O) in won
		6) Draw : Stage - is draw, no one won, because all grid is fill
		
	5# Grids
		1> Grid - keeper of array of cells, 3x3
